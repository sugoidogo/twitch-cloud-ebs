{
  "version": 3,
  "sources": ["../node_modules/fetch-retry/dist/fetch-retry.umd.js", "TwitchAuth.ts", "SugoiAuthProvider.ts"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.fetchRetry = factory());\n})(this, (function () { 'use strict';\n\n  var fetchRetry = function (fetch, defaults) {\n    defaults = defaults || {};\n    if (typeof fetch !== 'function') {\n      throw new ArgumentError('fetch must be a function');\n    }\n\n    if (typeof defaults !== 'object') {\n      throw new ArgumentError('defaults must be an object');\n    }\n\n    if (defaults.retries !== undefined && !isPositiveInteger(defaults.retries)) {\n      throw new ArgumentError('retries must be a positive integer');\n    }\n\n    if (defaults.retryDelay !== undefined && !isPositiveInteger(defaults.retryDelay) && typeof defaults.retryDelay !== 'function') {\n      throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n    }\n\n    if (defaults.retryOn !== undefined && !Array.isArray(defaults.retryOn) && typeof defaults.retryOn !== 'function') {\n      throw new ArgumentError('retryOn property expects an array or function');\n    }\n\n    var baseDefaults = {\n      retries: 3,\n      retryDelay: 1000,\n      retryOn: [],\n    };\n\n    defaults = Object.assign(baseDefaults, defaults);\n\n    return function fetchRetry(input, init) {\n      var retries = defaults.retries;\n      var retryDelay = defaults.retryDelay;\n      var retryOn = defaults.retryOn;\n\n      if (init && init.retries !== undefined) {\n        if (isPositiveInteger(init.retries)) {\n          retries = init.retries;\n        } else {\n          throw new ArgumentError('retries must be a positive integer');\n        }\n      }\n\n      if (init && init.retryDelay !== undefined) {\n        if (isPositiveInteger(init.retryDelay) || (typeof init.retryDelay === 'function')) {\n          retryDelay = init.retryDelay;\n        } else {\n          throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n        }\n      }\n\n      if (init && init.retryOn) {\n        if (Array.isArray(init.retryOn) || (typeof init.retryOn === 'function')) {\n          retryOn = init.retryOn;\n        } else {\n          throw new ArgumentError('retryOn property expects an array or function');\n        }\n      }\n\n      // eslint-disable-next-line no-undef\n      return new Promise(function (resolve, reject) {\n        var wrappedFetch = function (attempt) {\n          // As of node 18, this is no longer needed since node comes with native support for fetch:\n          /* istanbul ignore next */\n          var _input =\n            typeof Request !== 'undefined' && input instanceof Request\n              ? input.clone()\n              : input;\n          fetch(_input, init)\n            .then(function (response) {\n              if (Array.isArray(retryOn) && retryOn.indexOf(response.status) === -1) {\n                resolve(response);\n              } else if (typeof retryOn === 'function') {\n                try {\n                  // eslint-disable-next-line no-undef\n                  return Promise.resolve(retryOn(attempt, null, response))\n                    .then(function (retryOnResponse) {\n                      if(retryOnResponse) {\n                        retry(attempt, null, response);\n                      } else {\n                        resolve(response);\n                      }\n                    }).catch(reject);\n                } catch (error) {\n                  reject(error);\n                }\n              } else {\n                if (attempt < retries) {\n                  retry(attempt, null, response);\n                } else {\n                  resolve(response);\n                }\n              }\n            })\n            .catch(function (error) {\n              if (typeof retryOn === 'function') {\n                try {\n                  // eslint-disable-next-line no-undef\n                  Promise.resolve(retryOn(attempt, error, null))\n                    .then(function (retryOnResponse) {\n                      if(retryOnResponse) {\n                        retry(attempt, error, null);\n                      } else {\n                        reject(error);\n                      }\n                    })\n                    .catch(function(error) {\n                      reject(error);\n                    });\n                } catch(error) {\n                  reject(error);\n                }\n              } else if (attempt < retries) {\n                retry(attempt, error, null);\n              } else {\n                reject(error);\n              }\n            });\n        };\n\n        function retry(attempt, error, response) {\n          var delay = (typeof retryDelay === 'function') ?\n            retryDelay(attempt, error, response) : retryDelay;\n          setTimeout(function () {\n            wrappedFetch(++attempt);\n          }, delay);\n        }\n\n        wrappedFetch(0);\n      });\n    };\n  };\n\n  function isPositiveInteger(value) {\n    return Number.isInteger(value) && value >= 0;\n  }\n\n  function ArgumentError(message) {\n    this.name = 'ArgumentError';\n    this.message = message;\n  }\n\n  return fetchRetry;\n\n}));\n", "import fetch_retry from 'fetch-retry'\nconst fetch = fetch_retry(globalThis.fetch, {\n    retries: 10,\n    retryDelay: attempts => attempts * 1000\n})\n\nexport interface TwitchToken {\n    access_token: string\n    expires_in: number\n    obtainment_timestamp: number\n    token_type: string\n    user_id?: number\n    scope?: Array<string>\n    refresh_token?: string\n    login?: string\n    client_id?: string\n}\n\nexport interface AuthCode {\n    code: string\n    scope: string\n}\n\nconst redirect_uri = location.origin + location.pathname\nconst proxy_uri = new URL('/oauth2/token', import.meta.url)\n\n/**\n * Timestamp and return the token\n * @param {TwitchToken} token \n * @returns {TwitchToken}\n */\nfunction stamp(token: TwitchToken): TwitchToken {\n    token.obtainment_timestamp = Date.now()\n    return token\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#client-credentials-grant-flow\n * @param {string} client_id \n * @returns {Promise<TwitchToken>}\n */\nexport function getAppToken(client_id: string): Promise<TwitchToken> {\n    const searchParams = new URLSearchParams({\n        client_id: client_id,\n        grant_type: 'client_credentials'\n    })\n    return fetch(proxy_uri, {\n        method: 'POST',\n        body: searchParams.toString(),\n        headers: { 'content-type': 'application/x-www-form-urlencoded' }\n    }).then(async function (response) {\n        if (!response.ok) {\n            throw new Error(await response.text())\n        }\n        const token = await response.json()\n        return stamp(token)\n    })\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#implicit-grant-flow\n * @param {string} client_id \n * @param {Array<string>|string} scopes \n * @returns {Promise<AuthCode>}\n */\nexport function requestAccessToken(client_id: string, ...scopes: Array<string>) {\n    console.debug('requesting access token')\n    const url = new URL('https://id.twitch.tv/oauth2/authorize')\n    url.searchParams.append('response_type', 'token')\n    url.searchParams.append('client_id', client_id)\n    url.searchParams.append('scope', scopes.join(' '))\n    location.assign(url + '&redirect_uri=' + redirect_uri)\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#get-the-user-to-authorize-your-app\n * @param {string} client_id \n * @param {Array<string>|string} scopes \n * @returns {Promise<AuthCode>}\n */\nexport function requestAuthCode(client_id: string, ...scopes: Array<string>): Promise<any> {\n    console.debug('requesting authorization code')\n    const url = new URL('https://id.twitch.tv/oauth2/authorize')\n    url.searchParams.append('response_type', 'code')\n    url.searchParams.append('client_id', client_id)\n    url.searchParams.append('scope', scopes.join(' ').trim())\n    location.assign(url + '&redirect_uri=' + redirect_uri)\n    return new Promise(()=>{})\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#use-the-authorization-code-to-get-a-token\n * @param {string} client_id \n * @param {string} code \n * @returns {Promise<TwitchToken>}\n */\nexport function exchangeCode(client_id: string, code: string): Promise<TwitchToken> {\n    console.debug('exchanging authorization code')\n    const searchParams = new URLSearchParams({\n        client_id: client_id,\n        code: code,\n        grant_type: 'authorization_code'\n    })\n    return fetch(proxy_uri, {\n        method: 'POST',\n        body: searchParams.toString() + '&redirect_uri=' + redirect_uri,\n        headers: { 'content-type': 'application/x-www-form-urlencoded' }\n    }).then(async function (response) {\n        if (!response.ok) {\n            throw new Error(await response.text())\n        }\n        const token = await response.json()\n        return stamp(token)\n    })\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/validate-tokens/#how-to-validate-a-token\n * @param {string} access_token \n * @returns {TwitchToken}\n */\nexport async function validateToken(access_token: string): Promise<TwitchToken> {\n    console.debug('validating token')\n    return fetch('https://id.twitch.tv/oauth2/validate', {\n        headers: { authorization: 'OAuth ' + access_token }\n    }).then(async response => {\n        if (!response.ok) {\n            throw new Error(await response.text())\n        }\n        /** @type {TwitchToken} */\n        const token: any = await response.json()\n        token.access_token = access_token\n        token.scope = token.scopes\n        delete token.scopes\n        token.token_type = 'bearer'\n        return stamp(token)\n    })\n}\n\n/**\n * https://dev.twitch.tv/docs/authentication/refresh-tokens/#how-to-use-a-refresh-token\n * @param {string} client_id \n * @param {string} refresh_token \n * @returns {Promise<TwitchToken>}\n */\nexport function refreshToken(client_id: string, refresh_token: string): Promise<TwitchToken> {\n    console.debug('refreshing token')\n    const searchParams = new URLSearchParams({\n        client_id: client_id,\n        grant_type: 'refresh_token',\n        refresh_token: refresh_token\n    })\n    return fetch(proxy_uri, {\n        method: 'POST',\n        body: searchParams.toString(),\n        headers: { 'content-type': 'application/x-www-form-urlencoded' }\n    }).then(async function (response) {\n        if (!response.ok) {\n            throw new Error(await response.text())\n        }\n        return await response.json()\n    })\n}\n\n/**\n * This function checks the url search parameters and hash for an auth code,\n * refresh token, access token, or error message, in that order,\n * and if it finds none of those, starts the auth code grant flow.\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#authorization-code-grant-flow\n * @param {string} client_id \n * @returns {TwitchToken}\n */\nexport async function getUserToken(client_id: string, ...scopes): Promise<TwitchToken> {\n    const token=await getUserTokenPassive(client_id, ...scopes)\n    if(!token){\n        return requestAuthCode(client_id, ...scopes)\n    }\n    return token\n}\n\n/**\n * This function checks the url search parameters and hash for an auth code,\n * refresh token, access token, or error message, in that order.\n * https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#authorization-code-grant-flow\n * @param {string} client_id \n * @returns {TwitchToken}\n */\nexport async function getUserTokenPassive(client_id: string, ...scopes): Promise<TwitchToken>{\n    console.debug('scopes requested:',...scopes)\n    const params = new URLSearchParams(location.search + '&' + location.hash.substring(1))\n    if (params.has('code')) {\n        const code = params.get('code')\n        history.replaceState(null, '', redirect_uri)\n        return exchangeCode(client_id, code)\n    }\n    if (params.has('refresh_token')) {\n        return refreshToken(client_id, params.get('refresh_token'))\n    }\n    if (params.has('access_token')) {\n        return validateToken(params.get('access_token'))\n    }\n    if (params.has('error')) {\n        const error_message = params.get('error') + ': ' + params.get('error_description')\n        history.replaceState(null, '', redirect_uri)\n        throw new Error(error_message)\n    }\n    return null\n}\n\nexport default getUserToken", "import * as TwitchAuth from \"./TwitchAuth.ts\";\nimport { AccessTokenMaybeWithUserId, AuthProvider, AccessToken, AccessTokenWithUserId } from \"@twurple/auth\";\n\ntype Token = TwitchAuth.TwitchToken & AccessTokenMaybeWithUserId\n\nfunction getTwurpleProxy(token: TwitchAuth.TwitchToken): Token {\n    return new Proxy(token, {\n        get(target, name, receiver) {\n            return target[name.toString().replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)]\n        }\n    }) as Token\n}\n\nfunction hasScopes(token: Token, ...scopes: string[]) {\n    if (!token) {\n        return false\n    }\n    if (!scopes) {\n        return true\n    }\n    for (const scope of scopes) {\n        if (!token.scope.includes(scope)) {\n            return false\n        }\n    }\n    return true\n}\n\nexport default class SugoiAuthProvider implements AuthProvider {\n\n    #token: Token\n    clientId: string;\n\n    constructor(client_id: string) {\n        this.clientId = client_id\n    }\n\n    #setToken = (token: Token) => {\n        this.#token = token\n        return token\n    }\n\n    async addUser(...scopes: string[]) {\n        this.#token = await TwitchAuth.getUserToken(this.clientId, ...scopes).then(getTwurpleProxy).then(this.#setToken)\n        return this.#token\n    }\n\n    async addUserForToken(token: TwitchAuth.TwitchToken) {\n        if (token.refresh_token) {\n            this.#token = await TwitchAuth.refreshToken(this.clientId, token.refresh_token).then(getTwurpleProxy).then(this.#setToken)\n            return this.#token\n        }\n        this.#token = await TwitchAuth.validateToken(token.access_token).then(getTwurpleProxy).then(this.#setToken)\n        return this.#token\n    }\n\n    removeUser() {\n        this.#token = null\n    }\n\n    async getAccessTokenForUser(user: string | number, ...scopeSets: string[][]) {\n        if ((!scopeSets[0]) && (this.#token)) {\n            return this.#token as AccessTokenWithUserId\n        }\n        for (const scopes of scopeSets) {\n            if (hasScopes(this.#token, ...scopes)) {\n                return this.#token as AccessTokenWithUserId\n            }\n        }\n        this.#token = await TwitchAuth.getUserTokenPassive(this.clientId, ...(scopeSets[0] || [])).then(getTwurpleProxy).then(this.#setToken)\n        return this.#token as AccessTokenWithUserId\n    }\n\n    async getAnyAccessToken(user: string | number) {\n        return this.#token || TwitchAuth.getAppToken(this.clientId).then(getTwurpleProxy)\n    }\n\n    getCurrentScopesForUser(user: string | number) {\n        if (!this.#token || this.#token instanceof Promise) {\n            return []\n        }\n        return this.#token.scope\n    }\n\n    async refreshAccessTokenForUser(user: string | number) {\n        this.#token = await TwitchAuth.refreshToken(this.clientId, this.#token.refresh_token).then(this.#setToken)\n        return this.#token as AccessTokenWithUserId\n    }\n}"],
  "mappings": "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",
  "names": ["require_fetch_retry_umd", "__commonJSMin", "exports", "module", "global", "factory", "fetchRetry", "fetch", "defaults", "ArgumentError", "isPositiveInteger", "baseDefaults", "input", "init", "retries", "retryDelay", "retryOn", "resolve", "reject", "wrappedFetch", "attempt", "_input", "response", "retryOnResponse", "retry", "error", "delay", "value", "message", "import_fetch_retry", "fetch", "fetch_retry", "attempts", "redirect_uri", "proxy_uri", "stamp", "token", "getAppToken", "client_id", "searchParams", "response", "requestAuthCode", "client_id", "scopes", "url", "redirect_uri", "exchangeCode", "code", "searchParams", "fetch", "proxy_uri", "response", "token", "stamp", "validateToken", "access_token", "refreshToken", "refresh_token", "getUserToken", "getUserTokenPassive", "params", "error_message", "getTwurpleProxy", "token", "target", "name", "receiver", "letter", "hasScopes", "scopes", "scope", "_token", "_setToken", "SugoiAuthProvider", "client_id", "__privateAdd", "__privateSet", "getUserToken", "__privateGet", "refreshToken", "validateToken", "user", "scopeSets", "getUserTokenPassive", "getAppToken"]
}
